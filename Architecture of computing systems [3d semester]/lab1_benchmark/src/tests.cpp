///This file is auto-generated by `codegen.cpp`
///Please, do not edit without codegen.

#include<bits/stdc++.h>
#include "measure.cpp"
using namespace std;

int Test1_char_plus(int count_of_iterations) {
    char mask = (1<<12)-1;
    char hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}

int Test1_char_plus_empty(int count_of_iterations) {
    char mask = (1<<12)-1;
    char hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}


int Test1_char_mult(int count_of_iterations) {
    char mask = (1<<12)-1;
    char hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}

int Test1_char_mult_empty(int count_of_iterations) {
    char mask = (1<<12)-1;
    char hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}


int Test1_char_mod(int count_of_iterations) {
    char mask = (1<<12)-1;
    char hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}

int Test1_char_mod_empty(int count_of_iterations) {
    char mask = (1<<12)-1;
    char hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}


int Test1_short_plus(int count_of_iterations) {
    short mask = (1<<12)-1;
    short hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}

int Test1_short_plus_empty(int count_of_iterations) {
    short mask = (1<<12)-1;
    short hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}


int Test1_short_mult(int count_of_iterations) {
    short mask = (1<<12)-1;
    short hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}

int Test1_short_mult_empty(int count_of_iterations) {
    short mask = (1<<12)-1;
    short hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}


int Test1_short_mod(int count_of_iterations) {
    short mask = (1<<12)-1;
    short hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}

int Test1_short_mod_empty(int count_of_iterations) {
    short mask = (1<<12)-1;
    short hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}


int Test1_int_plus(int count_of_iterations) {
    int mask = (1<<12)-1;
    int hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}

int Test1_int_plus_empty(int count_of_iterations) {
    int mask = (1<<12)-1;
    int hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}


int Test1_int_mult(int count_of_iterations) {
    int mask = (1<<12)-1;
    int hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}

int Test1_int_mult_empty(int count_of_iterations) {
    int mask = (1<<12)-1;
    int hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}


int Test1_int_mod(int count_of_iterations) {
    int mask = (1<<12)-1;
    int hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}

int Test1_int_mod_empty(int count_of_iterations) {
    int mask = (1<<12)-1;
    int hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}


int Test1_longlong_plus(int count_of_iterations) {
    long long mask = (1<<12)-1;
    long long hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        hash &= mask;
        hash = hash + (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}

int Test1_longlong_plus_empty(int count_of_iterations) {
    long long mask = (1<<12)-1;
    long long hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        hash &= mask;
        hash = hash; // + (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}


int Test1_longlong_mult(int count_of_iterations) {
    long long mask = (1<<12)-1;
    long long hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        hash &= mask;
        hash = hash * (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}

int Test1_longlong_mult_empty(int count_of_iterations) {
    long long mask = (1<<12)-1;
    long long hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        hash &= mask;
        hash = hash; // * (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}


int Test1_longlong_mod(int count_of_iterations) {
    long long mask = (1<<12)-1;
    long long hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        hash &= mask;
        hash = hash % (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}

int Test1_longlong_mod_empty(int count_of_iterations) {
    long long mask = (1<<12)-1;
    long long hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        hash &= mask;
        hash = hash; // % (now);
        now += 6;
        hash &= mask;
    }
    return (int) hash + mask;
}


int Test5_float_plus(int count_of_iterations) {
    float mask = (1<<12)-1;
    float hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash + (now);
        hash = hash + (now);
        hash = hash + (now);
        hash = hash + (now);
        hash = hash + (now);
        hash = hash + (now);
        now += 6;
    }
    return (int) hash + mask;
}

int Test5_float_plus_empty(int count_of_iterations) {
    float mask = (1<<12)-1;
    float hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // + (now);
        hash = hash; // + (now);
        hash = hash; // + (now);
        hash = hash; // + (now);
        hash = hash; // + (now);
        hash = hash; // + (now);
        now += 6;
    }
    return (int) hash + mask;
}


int Test4_float_mult(int count_of_iterations) {
    float hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
    }
    return (int) hash;
}

int Test4_float_mult_empty(int count_of_iterations) {
    float hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
    }
    return (int) hash;
}


int Test4_float_div(int count_of_iterations) {
    float hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
    }
    return (int) hash;
}

int Test4_float_div_empty(int count_of_iterations) {
    float hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
    }
    return (int) hash;
}


int Test4_registerfloat_mult(int count_of_iterations) {
    register float hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
    }
    return (int) hash;
}

int Test4_registerfloat_mult_empty(int count_of_iterations) {
    register float hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
    }
    return (int) hash;
}


int Test4_registerfloat_div(int count_of_iterations) {
    register float hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
    }
    return (int) hash;
}

int Test4_registerfloat_div_empty(int count_of_iterations) {
    register float hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
    }
    return (int) hash;
}


int Test5_double_plus(int count_of_iterations) {
    double mask = (1<<12)-1;
    double hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash + (now);
        hash = hash + (now);
        hash = hash + (now);
        hash = hash + (now);
        hash = hash + (now);
        hash = hash + (now);
        now += 6;
    }
    return (int) hash + mask;
}

int Test5_double_plus_empty(int count_of_iterations) {
    double mask = (1<<12)-1;
    double hash = 0, now = 1;
    count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = hash; // + (now);
        hash = hash; // + (now);
        hash = hash; // + (now);
        hash = hash; // + (now);
        hash = hash; // + (now);
        hash = hash; // + (now);
        now += 6;
    }
    return (int) hash + mask;
}


int Test4_double_mult(int count_of_iterations) {
    double hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
    }
    return (int) hash;
}

int Test4_double_mult_empty(int count_of_iterations) {
    double hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
    }
    return (int) hash;
}


int Test4_double_div(int count_of_iterations) {
    double hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
    }
    return (int) hash;
}

int Test4_double_div_empty(int count_of_iterations) {
    double hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
    }
    return (int) hash;
}


int Test4_registerdouble_mult(int count_of_iterations) {
    register double hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
        hash = (hash+1) * c;
    }
    return (int) hash;
}

int Test4_registerdouble_mult_empty(int count_of_iterations) {
    register double hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
        hash = (hash+1); // * c;
    }
    return (int) hash;
}


int Test4_registerdouble_div(int count_of_iterations) {
    register double hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
        hash = (hash+1) / c;
    }
    return (int) hash;
}

int Test4_registerdouble_div_empty(int count_of_iterations) {
    register double hash = 1, a = 1000000, b = 1000001, c;
    c = a/b; count_of_iterations /= 6;
    for (int i=0; i<count_of_iterations; ++i) {
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
        hash = (hash+1); // / c;
    }
    return (int) hash;
}




vector<Measure> list_of_tests = {
   Measure(
       "char",
       "+", "plus",
       "", "",
       Test1_char_plus,
       Test1_char_plus_empty
   ),
   Measure(
       "char",
       "*", "mult",
       "", "",
       Test1_char_mult,
       Test1_char_mult_empty
   ),
   Measure(
       "char",
       "%", "mod",
       "", "",
       Test1_char_mod,
       Test1_char_mod_empty
   ),
   Measure(
       "short",
       "+", "plus",
       "", "",
       Test1_short_plus,
       Test1_short_plus_empty
   ),
   Measure(
       "short",
       "*", "mult",
       "", "",
       Test1_short_mult,
       Test1_short_mult_empty
   ),
   Measure(
       "short",
       "%", "mod",
       "", "",
       Test1_short_mod,
       Test1_short_mod_empty
   ),
   Measure(
       "int",
       "+", "plus",
       "", "",
       Test1_int_plus,
       Test1_int_plus_empty
   ),
   Measure(
       "int",
       "*", "mult",
       "", "",
       Test1_int_mult,
       Test1_int_mult_empty
   ),
   Measure(
       "int",
       "%", "mod",
       "", "",
       Test1_int_mod,
       Test1_int_mod_empty
   ),
   Measure(
       "long long",
       "+", "plus",
       "", "",
       Test1_longlong_plus,
       Test1_longlong_plus_empty
   ),
   Measure(
       "long long",
       "*", "mult",
       "", "",
       Test1_longlong_mult,
       Test1_longlong_mult_empty
   ),
   Measure(
       "long long",
       "%", "mod",
       "", "",
       Test1_longlong_mod,
       Test1_longlong_mod_empty
   ),
   Measure(
       "float",
       "+", "plus",
       "", "",
       Test5_float_plus,
       Test5_float_plus_empty
   ),
   Measure(
       "float",
       "*", "mult",
       "", "",
       Test4_float_mult,
       Test4_float_mult_empty
   ),
   Measure(
       "float",
       "/", "div",
       "", "",
       Test4_float_div,
       Test4_float_div_empty
   ),
   Measure(
       "register float",
       "*", "mult",
       "", "",
       Test4_registerfloat_mult,
       Test4_registerfloat_mult_empty
   ),
   Measure(
       "register float",
       "/", "div",
       "", "",
       Test4_registerfloat_div,
       Test4_registerfloat_div_empty
   ),
   Measure(
       "double",
       "+", "plus",
       "", "",
       Test5_double_plus,
       Test5_double_plus_empty
   ),
   Measure(
       "double",
       "*", "mult",
       "", "",
       Test4_double_mult,
       Test4_double_mult_empty
   ),
   Measure(
       "double",
       "/", "div",
       "", "",
       Test4_double_div,
       Test4_double_div_empty
   ),
   Measure(
       "register double",
       "*", "mult",
       "", "",
       Test4_registerdouble_mult,
       Test4_registerdouble_mult_empty
   ),
   Measure(
       "register double",
       "/", "div",
       "", "",
       Test4_registerdouble_div,
       Test4_registerdouble_div_empty
   )
};